<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>
  <context-param>
    <param-name>contextClass</param-name>
    <param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
  </context-param>

  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>me.goOn.AppConfig</param-value>
  </context-param>

  <filter>
    <filter-name>myFilter</filter-name>
    <filter-class>me.goOn.MyFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>myFilter</filter-name>
    <servlet-name>hello</servlet-name>
  </filter-mapping>

 <!-- <listener>
    <listener-class>me.goOn.MyListener</listener-class>
  </listener>-->
  
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
 <!-- 스프릥 IOC Container 즉, applicationContext를 이 서블릿 어플리케이션 생명주기에 맞춰서 바인딩 해주는 것.
  이 웹 애플리 케이션에 등록된 서블릿들이 사용할 수 있도록 어플리케이션 컨텍트를 만들어서 서블릿 컨텍스트에 등록해줌.
  그리고 서블릿이 종료될 시점에 어플리케이션 컨텍스트를 제거해줌.
  이게 정확히 서블릿 리스너가 할수 있는일
  서블릿 컨텍스트의 라이프 사이클에 맞추어서 스프링이 제공해주는 애플리케이션 컨텍스트를 연동해주는 가장 핵심적인 리스너 ContextLoaderListener
  ContextLoaderListener은 appicationContext를 만들어 야함.-->
  <!--
    DispactcherServlet안에도 WebApplicationContext가 생성되지만 이것은 dispatcherServlet에서만 사용되며
    다른 Servlet에서 공유될수 없음.
    이 WebApplicationContext은 기존conextLoaderListener가 생성한 WebApplicationContext를 부모로 상속받게 된다.
  -->



  <servlet>
    <servlet-name>hello</servlet-name>
    <servlet-class>me.goOn.HelloServlet</servlet-class>
  </servlet>

  <servlet-mapping>
    <servlet-name>hello</servlet-name>
    <url-pattern>/hello</url-pattern>
  </servlet-mapping>
</web-app>
